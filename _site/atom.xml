<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Technical Blog</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2020-08-10T21:15:22-05:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>There's still a fire! Let's make a game!</title>
   <link href="http://localhost:4000/2020/08/10/kontra-js"/>
   <updated>2020-08-10T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/08/10/kontra-js</id>
   <content type="html">&lt;h2 id=&quot;a-first-look-at-the-kontrajs-javascript-gaming-micro-libray&quot;&gt;A first look at the Kontra.js javascript gaming micro-libray&lt;/h2&gt;

&lt;p&gt;In the giant world of software development, there is truly an awe-inspiring array of options for solving any problem, tackling any project, or building any app. Languages, stacks, design patterns, frameworks, the list goes on! Personally, I’ve found a certain &lt;em&gt;kindred spirit&lt;/em&gt; amongst those that abide by the philosophy of “build it first, build it fast, figure out the rest later”. Even though Rails is a deep and thorough framework, the ability to get a rails app scaffolded and running in 20 minutes was revolutionary for web development.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://efangelist.files.wordpress.com/2014/08/ifyoubuildittheywillcome.png&quot; alt=&quot;get it built!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Continuing on in the spirit of the Camping ruby micro-framework, I’ve taken a first look at Kontra.js, a javascript gaming micro-framework. Created for a javascript Game-Jam event where developers were limited to a miniscule file-size, Kontra clocks in at a whopping 14kb. While often used to prototype games, or to get up and running quickly, Kontra’s first commercial release was the Jackbox Games’ “Murder Party”, topping out at over a million units sold. Let’s take a look!&lt;/p&gt;

&lt;p&gt;Importing the initialize functipon from the Kontra library allows the game to run and build the game canvas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { init } from 'kontra';

let { canvas, context } = init();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can import the Sprite and Gameloop methods to easily build out a simple sprite and event loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import { init, Sprite, GameLoop } from 'kontra';

let { canvas } = init();

let sprite = Sprite({
  x: 100,        // starting x,y position of the sprite
  y: 80,
  color: 'red',  // fill color of the sprite rectangle
  width: 20,     // width and height of the sprite rectangle
  height: 40,
  dx: 2          // move the sprite 2px to the right every frame
});

let loop = GameLoop({  // create the main game loop
  update: function() { // update the game state
    sprite.update();

    // wrap the sprites position when it reaches
    // the edge of the screen
    if (sprite.x &amp;gt; canvas.width) {
      sprite.x = -sprite.width;
    }
  },
  render: function() { // render the game state
    sprite.render();
  }
});

loop.start();    // start the game
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at that! We’ve got some stuff moving around the screen. That’s practically a game! Handling user-input is just as intuitive, using the Kontra “keyPressed” method. Imagine your game allowed the player to pilot a ship.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let ship = kontra.Sprite({
  x: 300,
  y: 300,
  width: 6,  // we'll use this later for collision detection
  rotation: 0,  // 0 degrees is to the right
  render() {
    this.context.save();
    
    // transform the origin and rotate around it 
    // using the ships rotation
    this.context.translate(this.x, this.y);
    this.context.rotate(degreesToRadians(this.rotation));
    
    // draw a right facing triangle
    this.context.beginPath();
    this.context.moveTo(-3, -5);
    this.context.lineTo(12, 0);
    this.context.lineTo(-3, 5);
    this.context.closePath();
    this.context.stroke();
    this.context.restore();
  },
  update() {
    // rotate the ship left or right
    if (kontra.keyPressed('left')) {
      this.rotation += -4
    }
    else if (kontra.keyPressed('right')) {
      this.rotation += 4
    }

        // move the ship forward in the direction it's facing
    const cos = Math.cos(degreesToRadians(this.rotation));
    const sin = Math.sin(degreesToRadians(this.rotation));
    
    if (kontra.keyPressed('up')) {
        this.ddx = cos * 0.05;
        this.ddy = sin * 0.05;
    }
    this.advance();
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*s755uqld64G8wfS9XpGzjA.png&quot; alt=&quot;now were zoomin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pretty exciting stuff, right? The Kontra.js site lists off dozens of games built with the library that are available to play, along with their github repositories. Starting small never felt so big!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fkEiwLW.png&quot; alt=&quot;games!&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Everything's on Fire - Let's go camping!</title>
   <link href="http://localhost:4000/2020/07/19/lets-go-camping"/>
   <updated>2020-07-19T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/07/19/lets-go-camping</id>
   <content type="html">&lt;h2 id=&quot;a-visual-introduction-to-ruby-frameworks&quot;&gt;A visual introduction to Ruby frameworks&lt;/h2&gt;

&lt;p&gt;As we begin moving away from the terminal and into full-fledged web development, we start to examine and work within some Ruby frameworks. First, we touched on Sinatra. 
&lt;img src=&quot;https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=2827&amp;amp;q=80&quot; alt=&quot;a regular cat&quot; /&gt;
Sinatra is a regular cat - not too smart, not too dumb, knows how to do some stuff, but you’re gonna have to teach it to do most anything useful. I like regular cats. They’re great to play with, and can even provide all sorts of teachable moments! As a first pet…i mean framework, Sinatra/regular cat is a solid jumping off point.&lt;/p&gt;
&lt;h3 id=&quot;then-theres-rails&quot;&gt;Then there’s Rails&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1471123327422-e370dc57a3da?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=2422&amp;amp;q=80&quot; alt=&quot;a big lion&quot; /&gt;
Rails is a lion - big, powerful, intimidating, and definitely not a candidate for your first pet. But, as we maybe (kind of?) learned from the Netflix series Tiger King, those that can harness the power of big cats can accomplish truly great (?) things. Github itself was built on a Rails backend! The first time you run &lt;code&gt;rails new Project&lt;/code&gt; in your console and a few hundred files, folders, dependencies, and sub-libraries are generated in a flash is truly an awe-inspiring experience. Learning to navigate the file structures that rails builds for you, and slowly incorporating the various helper methods that rails provide is immensley gratifying. Heck, the first time I ran &lt;code&gt;rails g scaffold Student name age:integer....&lt;/code&gt; and watched as it created all the requisite MVC files, classes, db migration, and so on that I had previously spent &lt;em&gt;hours&lt;/em&gt; learning to build out in a basic Sinatra app, I really began to understand all this talk of &lt;strong&gt;rails magic&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But ultimate, rails is an undertaking. It’s extensive, layered, and has taken (me at least) hours upon hours of trial and error, googling, and headshaking to make progress in. I can imagine a scenario where I have an idea for a simple app, but maybe don’t want to do all the legwork involved with getting a rails project off the ground.&lt;/p&gt;
&lt;h3 id=&quot;enter-camping&quot;&gt;Enter Camping&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1542736143-29a8432162bc?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=3150&amp;amp;q=80&quot; alt=&quot;kitten&quot; /&gt;
Camping is a ruby micro-framework created by, as far as I can tell, a few weirdos who have more or less removed their presence from the internet. Camping is tiny - the entire framework source code is less than &lt;strong&gt;4 kb&lt;/strong&gt;. What’s more, Camping’s core ethos is that your entire app can/should be contained in a single ruby document. Your MVC all exist simultaneously in one place. While you’re free to build out other pages and &lt;code&gt;require_relative&lt;/code&gt; them, Camping excels at being an agile launch pad for ideas.&lt;/p&gt;

&lt;p&gt;With the camping gem installed (it’s recommended you install the camping omnibus, as it includes markaby - more on that in a bit), All you need to do to get rolling is drop &lt;code&gt;Camping.goes :AppName&lt;/code&gt; at the top of your ruby document. Running &lt;code&gt;$ camping appname.rb&lt;/code&gt; in console will fire up a live server, and your project is up and running! Start by building out some views&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;module SandwichLad::Views
    def layout
        html do
            title { &amp;#39;Sandwich Lad&amp;#39; }
            body { 
                h1 &amp;#39;Welcome to Sandwich Lad&amp;#39;
                h2 &amp;quot;it&amp;#39;s #{Time.now}, time to talk-a sandwich&amp;quot;  
                self &amp;lt;&amp;lt; yield 
            
            }
            footer {
                h4 &amp;quot;COPYRIGHT IN PERPETUITY&amp;quot;
            }
        end
    end

    def landing
        body :id =&amp;gt; :frontpage do
            h3 &amp;#39;its my sandwich world&amp;#39;, :class =&amp;gt; :main
            ul do    
                div do a &amp;#39;add sandwich&amp;#39;, :href =&amp;gt; &amp;#39;/sandwiches/new&amp;#39; end 
                div do a &amp;#39;see sandwiches&amp;#39;, :href =&amp;gt; &amp;#39;/sandwiches&amp;#39; end 
            end 
        end
    end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then associate those views with some controllers via routes&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;module SandwichLad::Controllers
    class Index &amp;lt; R &amp;#39;/&amp;#39;
        def get
            render :landing
        end
    end

    class NewSandwich &amp;lt; R &amp;#39;/sandwiches/new&amp;#39;
        def get
            render :new_sandwich    
        end
    end

    class IndexSandwich &amp;lt; R &amp;#39;/sandwiches&amp;#39;
        def get
            render :sandwiches 
        end
    end 
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Notice all that inline html? That’s markaby! Markaby (Markup as Ruby) is a relatively straightforward alternative to erb with lousy documentation, but solid usability! We can even link to an external css stylesheet to style our app. Now we’re up to a whopping 2 files!&lt;/p&gt;

&lt;p&gt;Finally, we can build out a model and initial table migration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;module SandwichLad::Models
    class Sandwich &amp;lt; Base
    end

    class BasicFields &amp;lt; ActiveRecord::Migration[4.2]
        def self.up
          create_table Sandwich.create_sandwiches do |t|
            t.string :name
            t.text   :bread
            t.text   :cheese
            t.text   :proteins
            t.text   :condiments
            # This gives us created_at and updated_at
            t.timestamps
          end 
        end

        def self.down
            drop_table Sandwich.create_sandwiches
        end
    end
end


def SandwichLad.create
    SandwichLad::Models.create_schema
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our Basicfield class inherits from Active Record, and our schema gets created once the app is instanciated via the &lt;code&gt;SandwichLad.create&lt;/code&gt; method. At this point we’ve written out a very basic MVC pattern in under 100 lines of code, in a single ruby document. Neat! And while Camping is surely not an alternative for larger, more in-depth projects, it’s comforting to know there’s an option to speedily map out app ideas. As the saying goes, the right tool for the job, the right cat for the app. 
&lt;img src=&quot;https://www.northumbriacommunity.org/wp-content/uploads/2013/05/kitten-lion-mirror.jpg&quot; alt=&quot;mirror cat&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SOCCER BUDDY 64</title>
   <link href="http://localhost:4000/2020/07/09/flatiron-mod1-project-soccer-buddy"/>
   <updated>2020-07-09T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/07/09/Flatiron-Mod1-Project-Soccer-Buddy</id>
   <content type="html">&lt;h3 id=&quot;soccer-buddy-64&quot;&gt;SOCCER BUDDY 64&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/matthewlawrenceklein/ruby-project-guidelines-chi01-seng-ft-062220/Jacob/Images/N64%20SUPPER%20SOCCER%20BUDDY%2064.jpg&quot; alt=&quot;Soccer Buddy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SOCCER BUDDY 64 is a CLI application built in Ruby using Sinatra ActiveRecord to create our model structure. Our database is seeded from a CSV file of the 2019-2020 English Premiere League soccer schedule. The app allows users to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create/Login to their own unique account, persisted in our database&lt;/li&gt;
  &lt;li&gt;Search for league matches by team or stadium&lt;/li&gt;
  &lt;li&gt;Add matches to their favorites list&lt;/li&gt;
  &lt;li&gt;View, sort, and manipulate their favorites list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the build process we experienced a handful of challenges. Some of the major obstacles included&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parsing data from our original seed file, an XLS spreadsheet&lt;/li&gt;
  &lt;li&gt;Setting up checks to validate user input and not throw errors&lt;/li&gt;
  &lt;li&gt;Building out an intuitive and attractive UI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spreadsheet-hell---seeding-our-database&quot;&gt;Spreadsheet Hell - Seeding our database&lt;/h2&gt;

&lt;p&gt;Because of the current international pandemic most professional soccer leagues are shuttered, or operating on a much reduced capacity. This means that seeding our database from a live API would yield limited results. Instead, a quick search for &lt;em&gt;soccer database&lt;/em&gt; returned a fully fleshed out .XLS document file. Because .XLS is an outdated filetype (having been replaced with XLSX), there are only a couple of Ruby gems available that were able to parse the file. we ulitmately settled on the Spreadsheet gem, which worked correctly in a test environment. Unforunately, we faced a number of bugs when attempting to implement it in our working environment, with various errors targeting ActiveRecord and the gem itself. After a few hours of failed troubleshooting, we realized we could simply convert the spreadsheet file from XLS to CSV and use Ruby’s built-in CSV library. This solutoin was up and running almost immediately! The only caveat here was the CSV parser was incorrectly interpreting the spreadseet “Date” and “Time” data, instead spitting out static and incorrect data. We decided to scrap implementing time/date functionality and instead focus on what worked.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;data = CSV.read(&amp;quot;EPL_Fixturelist_1920.csv&amp;quot;)
data.each do |row|
    Match.create(home_team: row[1], away_team: row[5], location: row[6], date: row[2])
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;computers-are-dumb-and-so-are-we&quot;&gt;Computers are dumb, and so are we&lt;/h2&gt;

&lt;p&gt;Another hurdle we faced was attempting to account for user error when at all possible. The first solution was to turn to TTY::Prompt, a ruby gem that enabled us to write user-selectable responses. Instead of asking for user responses, we were able to implement a menu of selectable options.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def add_to_favorites
   answer = $prompt.select(&amp;quot;Would you like to add a match to your favorites?&amp;quot;.colorize(:color =&amp;gt; :black, :background =&amp;gt; :light_green), &amp;quot;YES&amp;quot;, &amp;quot;NO&amp;quot;)
        case
        when answer == &amp;quot;YES&amp;quot;
            puts &amp;quot;Please select a match by ID&amp;quot;
            print &amp;quot;&amp;gt; &amp;quot;
            number = gets.chomp 
            system(&amp;#39;clear&amp;#39;)
            Favorite.create(user_id: $user.id, match_id: number)
            favoriteMatchesAre = TTY::Box.info(&amp;quot;your favorites are now:&amp;quot;)
            print favoriteMatchesAre 
            $user.reload
            $user.matches.each { |match| ap &amp;quot;#{match.home_team} play #{match.away_team} at #{match.location}.&amp;quot; }
            
            display_options()
            user_input()
        when answer == &amp;quot;NO&amp;quot;
            system(&amp;#39;clear&amp;#39;)
            display_options()
            user_input()
        end
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The other major validation checkpoint was upon login - We needed a way to check our database of users against the input to see if that user exists. If the user exists, than the current user should be assigned to that user ID. If not, the app should kick back an error and prompt the user for new input. The solution we developed is sloppy, but functional.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;case
        when answer == &amp;quot;NEW USER&amp;quot;
            puts &amp;quot;Whats your name?&amp;quot;.colorize(:color =&amp;gt; :black, :background =&amp;gt; :light_green)
            print &amp;quot;&amp;gt; &amp;quot;
            name = gets.chomp
            $user = User.create(name: name)
            welcomeUser = TTY::Box.success(&amp;quot;Your user ID is #{$user.id}, please remember this number!&amp;quot;)
            print welcomeUser
        when answer == &amp;quot;EXISTING USER&amp;quot;
            puts &amp;quot;Please enter your user ID&amp;quot;
            print &amp;quot;&amp;gt; &amp;quot;
            answer_id = gets.chomp   
            allIds = []
            User.all.each { |user| allIds &amp;lt;&amp;lt; user.id }

            if allIds.include?(answer_id.to_i)
                    $user = User.all.find{ |user| user.id == answer_id.to_i }    
                    welcomeExistingUser = TTY::Box.success(&amp;quot;Welcome back #{$user.name}&amp;quot;)
                    print welcomeExistingUser
                else puts TTY::Box.error(&amp;quot;USER ID NOT FOUND SORRY FRIEND&amp;quot;)
                    
                    welcome()
            end
        end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If attempting to access an existing account, the user submits an ID #. An empty array is created, and all existing User.id info in the database is shoveled into the array. Then the array is checked to see if it includes the input data (converted to an integer). If it exists, the user is tied to the existing account.&lt;/p&gt;

&lt;h2 id=&quot;and-it-looks-nice-too&quot;&gt;And it looks nice, too!&lt;/h2&gt;

&lt;p&gt;Once the app was functionally built out, we focused our attention on the user experience. This mainly took the form of contextual colorization, intuitive menu structures, a thorough README, and a demonstration video.&lt;/p&gt;

&lt;h2 id=&quot;stray-thoughts&quot;&gt;Stray thoughts&lt;/h2&gt;

&lt;p&gt;This Mod 1 project was an excellent crash course on code collaboration, time management, troubleshooting, googling, and all the other foundational skills that SWE careers are built on. I’d say overall we’d give the experience an A, A-. Solid project. Good job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rJCPOVV.png&quot; alt=&quot;agile development&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>chompr Pt. 1 -  Proof of concept</title>
   <link href="http://localhost:4000/2020/06/25/chompr-proof-of-concept"/>
   <updated>2020-06-25T00:00:00-05:00</updated>
   <id>http://localhost:4000/2020/06/25/chompr-proof-of-concept</id>
   <content type="html">&lt;h3 id=&quot;a-starting-point&quot;&gt;A Starting Point&lt;/h3&gt;

&lt;p&gt;I don’t think I’m alone in saying that my first foray into software development began when I had an idea for an app that I wanted bad enough
that when I couldn’t find it, I decided to try and learn how to make it myself. A few months later I’ve learned enough to know that I know
precious little, but I finally feel like I’m on a path where I can see the &lt;em&gt;app&lt;/em&gt; at the end of the tunnel.&lt;/p&gt;

&lt;p&gt;I’m going to use these blog posts as an opportunity to chronicle the process of developing an app &lt;em&gt;alongside&lt;/em&gt; developing a skillset. Let’s go!&lt;/p&gt;

&lt;h3 id=&quot;chompr---or-idk-what-do-you-feel-like&quot;&gt;chompr - Or, “IDK, what do you feel like?”&lt;/h3&gt;

&lt;p&gt;I’ve spent &lt;strong&gt;way&lt;/strong&gt; too many nights laying on the couch with a friend or partner doing the back-and-forth dance of “what are you in the mood to eat”. It’s a vicious cycle of hunger, indecision, and ultimately, the resignation of eventually landing on a choice that no one’s particularly excited for. Literally any alternative would be prefarable: a giant plinko board, prize wheel, or even… an &lt;strong&gt;app&lt;/strong&gt;. Ideally an app that can help its users choose a meal option&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://external-preview.redd.it/zC3dcSZFa0BOSk-AbVIqN3vwy7lIKwKnlzs5DGpAz5E.jpg?width=1024&amp;amp;auto=webp&amp;amp;s=2cb4f9c634b5a431978867eeaa765887f4b4bab8&quot; alt=&quot;spin the choice&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;easily&lt;/li&gt;
  &lt;li&gt;quickly&lt;/li&gt;
  &lt;li&gt;intuitively&lt;/li&gt;
  &lt;li&gt;fairly, with respect to each chooser&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://rciemecdn.imgix.net/API/Blog/tapas_800px.jpg&quot; alt=&quot;lots of food&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, I’ve put together a &lt;em&gt;wish list&lt;/em&gt; of features/functionality that I’d like to pursue, with varying degrees of complexity. Of course, it’s all pretty complex for me right now, but I’m attemping to tackle it in small chunks. For functionality, I’m hoping to build out an app that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;accepts a geographic location (user-input zipcode? cellular location data? Google web location data?)&lt;/li&gt;
  &lt;li&gt;allows for either delivery or take-out&lt;/li&gt;
  &lt;li&gt;accepts a number of choosers, with names for each (I think the process starts to break down with 5+ choosers)&lt;/li&gt;
  &lt;li&gt;provides the choosers with a randomized set of eight food categories (ie Thai, Korean, BBQ, Pub Fare)&lt;/li&gt;
  &lt;li&gt;randomly selects a chooser to select a category to eliminate, within a time limit (30 second?)&lt;/li&gt;
  &lt;li&gt;Once choosers have eliminated all but one option, the app instantiates a search for nearby restaurants in that category.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve got some stretch goals too, including user auth and API integration (grubhub? uber eats?). And any mobile development is firmly in the stretch category.&lt;/p&gt;

&lt;h3 id=&quot;humble-beginnings---lets-write-some-code&quot;&gt;Humble Beginnings - Let’s write some code&lt;/h3&gt;

&lt;p&gt;I’ve got a couple of big ol’ lists of stuff I don’t know how to do yet up there, but I can start by building some base functionality. First, let’s figure out a way to randomly generate eight food categories from a much larger “database” of catagories.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def create_choices
    options = %w[Thai Sushi Japanese Southern Korean Greek Armenian Italian Pizza Burgers 
    Sandwiches BBQ Mexican American Fast-Food Diner Chinese Pub-Fare]
    
    mixed = options.shuffle
    
    $choice_set = []

    (0...8).map { |i| $choice_set.push(mixed[i]) }
end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cool, so now we’ve got the ability to grab a new and randomized choice set every time. Now we should try and grab the number of chompers, and allow for naming each of them. Again, we’ll probably want to keep the max chompers to 4.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def get_users
        print &amp;quot;&amp;gt; &amp;quot;
        $users = $stdin.gets.chomp 

        case 
        when $users.to_i &amp;lt;= 4
            puts &amp;quot;~&amp;quot; * 15
            puts &amp;quot;super&amp;quot;
        when $users.to_i &amp;gt; 4
            puts &amp;quot;~&amp;quot; * 15
            puts &amp;quot;too many folx&amp;quot;
            get_users()
        else
            puts &amp;quot;~&amp;quot; * 15
            puts &amp;quot;invalid input&amp;quot;
            get_users()
        end
        puts &amp;quot;~&amp;quot; * 15
    end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And let’s get names for each chomper&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def name_users

        $user_array = []
        i = 0
    
        while i &amp;lt; $users.to_i do
            print &amp;quot;user #{i + 1} name &amp;gt; &amp;quot;
            $user_array[i] = $stdin.gets.chomp
            i += 1
        end

``
        puts &amp;quot;super, we&amp;#39;ve got&amp;quot;
        puts &amp;quot;~&amp;quot; * 15
        puts $user_array
        puts &amp;quot;~&amp;quot; * 15
    end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, let’s layout the logic for each elimination round. We want to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;randomly select a chomper to make a selection&lt;/li&gt;
  &lt;li&gt;show the chomper the current food options&lt;/li&gt;
  &lt;li&gt;take input for the option they’d like to eliminate&lt;/li&gt;
  &lt;li&gt;remove the option from the options set&lt;/li&gt;
  &lt;li&gt;repeat until one option remains&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s what I’ve got so far&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;def elimination_round
    
        while $choice_set.length &amp;gt; 1
            shuffled_users = $user_array.shuffle()
            puts &amp;quot;#{shuffled_users[0]}, you&amp;#39;ve been selected to eliminate an option&amp;quot;
            puts &amp;quot;what would you like to eliminate?&amp;quot;
            print &amp;quot;&amp;gt; &amp;quot;
            eliminate = $stdin.gets.chomp

            $choice_set.each do |name|
                if name == eliminate
                    $choice_set.delete(name)
                end
            end

            puts &amp;quot;your options are now&amp;quot;
            puts &amp;quot;~&amp;quot; * 15
            puts $choice_set
            puts &amp;quot;~&amp;quot; * 15
        end
    end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Excellent! Now we’re making progress!
&lt;img src=&quot;https://media.giphy.com/media/40F4fLvOkInEk/giphy.gif&quot; alt=&quot;happy racoon&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;coming-up-next&quot;&gt;Coming Up Next&lt;/h3&gt;

&lt;p&gt;We’ve not got the basic logic functioning, and we’re set to take user input from the command line. My next step is going to be packaging this functionality into a 
CLI ruby gem, and &lt;em&gt;shipping&lt;/em&gt; a first &lt;em&gt;completed&lt;/em&gt; product - so to speak. C’yall in a few weeks!&lt;/p&gt;
</content>
 </entry>
 

</feed>
