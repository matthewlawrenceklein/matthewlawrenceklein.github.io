I"Ö<h2 id="a-first-look-at-the-kontrajs-javascript-gaming-micro-libray">A first look at the Kontra.js javascript gaming micro-libray</h2>

<p>In the giant world of software development, there is truly an awe-inspiring array of options for solving any problem, tackling any project, or building any app. Languages, stacks, design patterns, frameworks, the list goes on! Personally, I‚Äôve found a certain <em>kindred spirit</em> amongst those that abide by the philosophy of ‚Äúbuild it first, build it fast, figure out the rest later‚Äù. Even though Rails is a deep and thorough framework, the ability to get a rails app scaffolded and running in 20 minutes was revolutionary for web development.</p>

<p><img src="https://efangelist.files.wordpress.com/2014/08/ifyoubuildittheywillcome.png" alt="get it built!" /></p>

<p>Continuing on in the spirit of the Camping ruby micro-framework, I‚Äôve taken a first look at Kontra.js, a javascript gaming micro-framework. Created for a javascript Game-Jam event where developers were limited to a miniscule file-size, Kontra clocks in at a whopping 14kb. While often used to prototype games, or to get up and running quickly, Kontra‚Äôs first commercial release was the Jackbox Games‚Äô ‚ÄúMurder Party‚Äù, topping out at over a million units sold. Let‚Äôs take a look!</p>

<p>Importing the initialize functipon from the Kontra library allows the game to run and build the game canvas.</p>

<pre><code>import { init } from 'kontra';

let { canvas, context } = init();
</code></pre>

<p>Now we can import the Sprite and Gameloop methods to easily build out a simple sprite and event loop.</p>

<pre><code>import { init, Sprite, GameLoop } from 'kontra';

let { canvas } = init();

let sprite = Sprite({
  x: 100,        // starting x,y position of the sprite
  y: 80,
  color: 'red',  // fill color of the sprite rectangle
  width: 20,     // width and height of the sprite rectangle
  height: 40,
  dx: 2          // move the sprite 2px to the right every frame
});

let loop = GameLoop({  // create the main game loop
  update: function() { // update the game state
    sprite.update();

    // wrap the sprites position when it reaches
    // the edge of the screen
    if (sprite.x &gt; canvas.width) {
      sprite.x = -sprite.width;
    }
  },
  render: function() { // render the game state
    sprite.render();
  }
});

loop.start();    // start the game
</code></pre>

<p>Look at that! We‚Äôve got some stuff moving around the screen. That‚Äôs practically a game! Handling user-input is just as intuitive, using the Kontra ‚ÄúkeyPressed‚Äù method. Imagine your game allowed the player to pilot a ship.</p>

<pre><code>let ship = kontra.Sprite({
  x: 300,
  y: 300,
  width: 6,  // we'll use this later for collision detection
  rotation: 0,  // 0 degrees is to the right
  render() {
    this.context.save();
    
    // transform the origin and rotate around it 
    // using the ships rotation
    this.context.translate(this.x, this.y);
    this.context.rotate(degreesToRadians(this.rotation));
    
    // draw a right facing triangle
    this.context.beginPath();
    this.context.moveTo(-3, -5);
    this.context.lineTo(12, 0);
    this.context.lineTo(-3, 5);
    this.context.closePath();
    this.context.stroke();
    this.context.restore();
  },
  update() {
    // rotate the ship left or right
    if (kontra.keyPressed('left')) {
      this.rotation += -4
    }
    else if (kontra.keyPressed('right')) {
      this.rotation += 4
    }

        // move the ship forward in the direction it's facing
    const cos = Math.cos(degreesToRadians(this.rotation));
    const sin = Math.sin(degreesToRadians(this.rotation));
    
    if (kontra.keyPressed('up')) {
        this.ddx = cos * 0.05;
        this.ddy = sin * 0.05;
    }
    this.advance();
  }
});
</code></pre>

<p><img src="https://miro.medium.com/max/1400/1*s755uqld64G8wfS9XpGzjA.png" alt="now were zoomin" /></p>

<p>Pretty exciting stuff, right?</p>
:ET